#define TD_TAPPING_TERM 200

#include <dt-bindings/zmk/outputs.h>

&lt {
    quick_tap_ms = <TD_TAPPING_TERM>;
    tapping-term-ms = <TD_TAPPING_TERM>;
    quick-tap-ms = <TD_TAPPING_TERM>;
    flavor = "tap-preferred";
};

&caps_word {
    continue-list = <
        UNDERSCORE
        MINUS
        BACKSPACE
        DELETE
        LEFT
        RIGHT
        UP
        DOWN
        RIGHT_SHIFT
        LEFT_SHIFT
        F17
        F18
    >;
};

&sl { release-after-ms = <2000>; };

/ {
    behaviors {

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <TD_TAPPING_TERM>;
            quick-tap-ms = <TD_TAPPING_TERM>;
            flavor = "tap-preferred";
        };

        ht_tog_layer: ht_tog_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "TOG_LAYER_HOLD_KEY";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;         // Disable quick tap
            flavor = "hold-preferred";  // Hold takes precedence if held past tapping-term-ms
            bindings = <&kp>, <&tog>;   // Hold: key, Tap: toggle layer
        };

        /*
         * Auto Mod
         *
         * Usage: &am RPAR LPAR
         * Tap: (
         * Hold: )
         *
         * --
         *
         * Auto Shift
         *
         * Usage: AS(A)
         * Tap: a
         * Hold: A (shifted 'a')
         */

        am: auto_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        #define AM(hold_keycode, tap_keycode) &am hold_keycode tap_keycode
        #define AS(keycode) &am LS(keycode) keycode

        /*layer_word: layer_word {
            compatible = "zmk,behavior-caps-word";
            label = "LAYER_WORD";
            #binding-cells = <0>;
            continue-list = <
                N0 N1 N2 N3 N4 N5 N6 N7 N8 N9
                BACKSPACE DELETE DOT COMMA
                SLASH ASTERISK PLUS MINUS EQUAL
            >;
            layers = <NUM_WORD>;
        };*/

        /*
        * Tap dancing shift
        *
        * Usage: &td_shift_l / &td_shift_r
        * Hold: Shift
        * Double Tap: Caps Word
        * Triple Tap: Caps Lock
        */

        td_shift_l: td_shift_l {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TD_TAPPING_TERM>;
            bindings = <&kp LEFT_SHIFT>, <&caps_word>, <&kp CAPSLOCK>;
        };

        td_shift_r: td_shift_r {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TD_TAPPING_TERM>;
            bindings = <&kp RIGHT_SHIFT>, <&caps_word>, <&kp CAPSLOCK>;
        };


        /*
        * Double Tap to clear BT
        *
        * Usage: &td_out_bt_clear
        * Hold / Tap: Toggle output (USB or BT)
        * Double Tap: Clear BT
        */
        td_out_bt_clear: td_out_bt_clear {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TD_TAPPING_TERM>;
            bindings = <&out OUT_TOG>, <&bt BT_CLR>;
        };

        /*
         * Shifted Space underscores + Layer Tap
         *
         * Usage: &mm_spc_unds_layer
         * Tap: Space
         * LShift-Tap: -
         * RShift-Tap: _
         * Hold: Switch layer
         */
        mm_spc_unds_layer: mod_morph_underscore {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&lt_l SYM SPACE>, <&kp MINUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        /*
        * Tap dancing sym layer
        *
        * Usage: &td_sym_layer
        * Tap: Enter
        * Hold: SYM layer
        * Double Tap: SYM_WORD layer
        * Triple Tap: SYM layer toggled
        */
        td_sym_layer: td_sym_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            #ifdef HAS_UROB
                bindings = <&lt_l SYM RET>, <&sym_word>;
            #else
                bindings = <&lt_l SYM RET>, <&tog SYM>;
            #endif
        };

        /*
        * Tap dancing Nav layer
        *
        * Usage: &td_nav_layer
        * Tap: Del
        * Hold: Nav layer
        * Double Tap: NAV_WORD layer
        * Triple Tap: NAV layer toggled
        */
        td_nav_layer: td_nav_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            #ifdef HAS_UROB
                bindings = <&lt_l NAV ESCAPE>, <&nav_word>;
            #else
                bindings = <&lt_l NAV ESCAPE>, <&tog NAV>;
            #endif
        };

        #ifdef HAS_UROB
            nav_word: nav_word {
                compatible = "zmk,behavior-caps-word";
                #binding-cells = <0>;
                // layers = <NAV_WORD>;
                continue-list = <
                    LEFT DOWN UP RIGHT
                    MY_RIGHT_L MY_RIGHT_W
                    PG_UP PG_DN
                    HOME END
                    MY_UNDO MY_REDO MY_CUT MY_COPY MY_PASTE
                    PRINTSCREEN SCROLLLOCK PAUSE_BREAK
                    INSERT DEL
                    F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12
                >;
                // ignore-modifiers;  // modifiers don't deactivate the layer
            };
        #else
            nav_word: nav_word {
                compatible = "zmk,behavior-none";
                #binding-cells = <0>;
            };
        #endif

        #ifdef HAS_UROB
            sym_word: sym_word {
                compatible = "zmk,behavior-caps-word";
                #binding-cells = <0>;
                // layers = <SYM_WORD>;
                continue-list = <
                    CARET AMPERSAND PLUS EQUAL MINUS SLASH PIPE
                    TILDE PERCENT UNDERSCORE EXCLAMATION DOLLAR SEMICOLON
                    HASH COLON GRAVE ASTERISK BACKSLASH AT_SIGN
                    RPAR LPAR RBKT LBKT RBRC LBRC GT LT
                    BACKSPACE DOT DOUBLE_QUOTES SQT
                >;
                // ignore-modifiers;  // modifiers don't deactivate the layer
            };
        #else
            sym_word: sym_word {
                compatible = "zmk,behavior-none";
                #binding-cells = <0>;
            };
        #endif


        #ifdef HAS_TRI_STATE
            /*
            * Swapper CMD + TAB
            *
            * Use CMD TAB app switcher with a single app press.
            * Requires ZMK PR #1366.
            */
            swapper_cmd_tab: swapper {
                compatible = "zmk,behavior-tri-state";
                #binding-cells = <0>;
                bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
                //  ignored-key-positions = <x>;
            };
        #else
            swapper_cmd_tab: swapper {
                compatible = "zmk,behavior-none";
                #binding-cells = <0>;
            };
        #endif


        /*lt_num_word: lt_num_word {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;

            #ifdef HAS_UROB
                bindings = <&mo NUM>, <&my_num_word>;
            #else
                bindings = <&mo NUM>, <&tog NUM>;
            #endif
        };*/


        /**
         * Hold-Tap behavior for number word.
         *
         * Usage: &ht_num_word <keycode>
         * Tap: Number word layer
         * Hold: <keycode>
         */
        /*ht_num_word: ht_num_word {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&layer_word>; // Hold = key, Tap = layer_word
        };*/

        #ifdef HAS_UROB
            my_num_word: my_num_word {
                compatible = "zmk,behavior-caps-word";
                #binding-cells = <0>;
                // layers = <NUM_WORD>;
                continue-list = <
                    BACKSPACE DELETE DOT COMMA
                    SLASH ASTERISK KP_ASTERISK PLUS MINUS EQUAL DOLLAR DOT
                    RS(SPACE)
                    N0 N1 N2 N3 N4 N5 N6 N7 N8 N9
                >;
                // ignore-modifiers;  // modifiers don't deactivate the layer
            };
        #else
            my_num_word: my_num_word {
                compatible = "zmk,behavior-none";
                #binding-cells = <0>;
            };
        #endif

       /*
        * Layer Toggle
        *
        * Usage: &ltog LGUI NAV
        * Tap: Layer Toggle
        * Hold: Keypress
        */
        ltog: ltog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            bindings = <&kp>, <&tog>;
        };

       /*
        * Layer Sticky Key Tap Toggle
        *
        * Usage: &sklt NUM RSHFT
        * Tap: Sticky Key
        * Hold: Layer
        */
        sklt: sklt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            bindings = <&mo>, <&sk>;
        };

       /*
        * Timerless Layer Tap
        *
        * Works similarly timerless homerow mods. It activates the
        * layer hold immediately for keys on the right side.
        */
        lt_l: layer_tap_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
			quick-tap-ms = <160>;

            // Activate layer function immediately if a key on the right
            // side of the keyboard is used.
            hold-trigger-key-positions = <KEYS_R>;
            hold-trigger-on-release;

            bindings = <&mo>, <&kp>;
        };

        lt_r: layer_tap_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
			quick-tap-ms = <160>;

            // Activate layer function immediately if a key on the right
            // side of the keyboard is used.
            hold-trigger-key-positions = <KEYS_L>;

            bindings = <&mo>, <&kp>;
        };

        // Hold - shift,
        // tap - Backspace,
        // Shifted Backspace - delete
        ht_shift_bksp_del: ht_shift_bksp_del {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&mm_bksp_del_shifted>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;// repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };
    };
};
