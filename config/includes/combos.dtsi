#include "layers_definitions.dtsi"

#define COMBO_TERM_FAST 35
#define COMBO_TERM_SLOW 50
#define COMBO_PRIOR_IDLE_FAST 10
#define COMBO_PRIOR_IDLE_SLOW 100

/ {
	combos {
		compatible = "zmk,combos";

		combo_esc2 {
			bindings = <&kp ESC>;
			key-positions = <LT5 LM5>;
			timeout-ms = <COMBO_TERM_FAST>;
			require-prior-idle-ms = <COMBO_PRIOR_IDLE_FAST>;
		};
		
		combo_undo {
			bindings = <&kp LG(Z)>;
			key-positions = <37 25>;
			timeout-ms = <COMBO_TERM_FAST>;
			require-prior-idle-ms = <COMBO_PRIOR_IDLE_FAST>;
		};
		
		combo_redo {
			bindings = <&kp MY_REDO>;
			key-positions = <LT1 LM1>;
			timeout-ms = <COMBO_TERM_FAST>;
			require-prior-idle-ms = <COMBO_PRIOR_IDLE_FAST>;
		};
		
		combo_cut {
			bindings = <&kp LG(X)>;
			key-positions = <38 26>;
			timeout-ms = <COMBO_TERM_FAST>;
			require-prior-idle-ms = <COMBO_PRIOR_IDLE_FAST>;
		};
		
		combo_copy {
			bindings = <&kp LG(C)>;
			key-positions = <39 27>;
			timeout-ms = <COMBO_TERM_FAST>;
			require-prior-idle-ms = <COMBO_PRIOR_IDLE_FAST>;
		};
		
		combo_paste {
			bindings = <&kp LG(V)>;
			key-positions = <40 28>;
			timeout-ms = <COMBO_TERM_FAST>;
			require-prior-idle-ms = <COMBO_PRIOR_IDLE_FAST>;
		};
		
		combo_toggle_num_layer_left {
			bindings = <&tog NUM>;
			key-positions = <LB0 LH1>;
			timeout-ms = <COMBO_TERM_FAST>;
		};
		
		combo_toggle_nav_layer_left {
			bindings = <&tog NAV_LEFTHAND_SELECTION>;
			key-positions = <LB1 LH2>;
			timeout-ms = <COMBO_TERM_FAST>;
		};
		
		combo_tog_num_layer_right {
			bindings = <&tog NUM>;
			key-positions = <RB0 RH1>;
			timeout-ms = <COMBO_TERM_FAST>;
		};
		
		combo_tog_nav_layer_right {
			bindings = <&tog NAV>;
			key-positions = <RB1 RH2>;
			timeout-ms = <COMBO_TERM_FAST>;
		};
		
		combo_enter_left {
			bindings = <&kp ENTER>;
			key-positions = <LM2 LM1>;
			timeout-ms = <COMBO_TERM_FAST>;
			require-prior-idle-ms = <COMBO_PRIOR_IDLE_SLOW>;
			layers = <BASE NUM_WORD NUM NUM_LOCKED SYM_WORD SYM SYM_LOCKED NAV_WORD NAV NAV_LOCKED NAV_LEFTHAND NAV_LEFTHAND_SELECTION FUNCT FUNCT_LOCKED MOUSE>;
		};
		
		combo_backspace_left {
			bindings = <&kp BACKSPACE>;
			key-positions = <LM3 LM2>;
			timeout-ms = <COMBO_TERM_FAST>;
			require-prior-idle-ms = <COMBO_PRIOR_IDLE_SLOW>;
			layers = <BASE NUM_WORD NUM NUM_LOCKED SYM_WORD SYM SYM_LOCKED NAV_WORD NAV NAV_LOCKED NAV_LEFTHAND NAV_LEFTHAND_SELECTION FUNCT FUNCT_LOCKED MOUSE>;
		};
		
		combo_enter_right {
			bindings = <&kp ENTER>;
			key-positions = <RM1 RM2>;
			timeout-ms = <COMBO_TERM_FAST>;
			require-prior-idle-ms = <COMBO_PRIOR_IDLE_SLOW>;
			layers = <BASE NUM_WORD NUM NUM_LOCKED SYM_WORD SYM SYM_LOCKED NAV_WORD NAV NAV_LOCKED NAV_LEFTHAND NAV_LEFTHAND_SELECTION FUNCT FUNCT_LOCKED>;
		};
		
		combo_backspace_right {
			bindings = <&kp BACKSPACE>;
			key-positions = <RM2 RM3>;
			timeout-ms = <COMBO_TERM_FAST>;
			require-prior-idle-ms = <COMBO_PRIOR_IDLE_SLOW>;
			layers = <BASE NUM_WORD NUM NUM_LOCKED SYM_WORD SYM SYM_LOCKED NAV_WORD NAV NAV_LOCKED NAV_LEFTHAND NAV_LEFTHAND_SELECTION FUNCT FUNCT_LOCKED>;
		};
		
		combo_lang_switch_win {
			bindings = <&kp LA(LSHIFT)>;
			key-positions = <RM0 RB0>;
			timeout-ms = <COMBO_TERM_FAST>;
			require-prior-idle-ms = <COMBO_PRIOR_IDLE_FAST>;
		};
		
		combo_print_screen {
			bindings = <&kp PRINTSCREEN>;
			key-positions = <LN4 LT4>;
			timeout-ms = <COMBO_TERM_FAST>;
			require-prior-idle-ms = <COMBO_PRIOR_IDLE_FAST>;
		};
		
		combo_monosnap_capture_area {
			bindings = <&kp LA(LG(N5))>;
			key-positions = <LN3 LT3>;
			timeout-ms = <COMBO_TERM_FAST>;
			require-prior-idle-ms = <COMBO_PRIOR_IDLE_FAST>;
		};
		
		combo_monosnap_capture_screen {
			bindings = <&kp LA(LG(N6))>;
			key-positions = <LN2 LT2>;
			timeout-ms = <COMBO_TERM_FAST>;
			require-prior-idle-ms = <COMBO_PRIOR_IDLE_FAST>;
		};

		combo_intellij_cmd_q {
			bindings = <&kp LG(Q)>;
			key-positions = <LT4 LM4>;
			timeout-ms = <COMBO_TERM_FAST>;
		};

		combo_intellij_cmd_alt_b {
			bindings = <&kp LG(LA(B))>;
			key-positions = <LT3 LM3>;
			timeout-ms = <COMBO_TERM_FAST>;
		};

		combo_intellij_go_back {
			bindings = <&kp LG(LA(ARROW_LEFT))>;
			key-positions = <LT2 LM2>;
			timeout-ms = <COMBO_TERM_FAST>;
		};

		combo_intellij_go_to_last_edit {
			bindings = <&kp LG(LS(BACKSPACE))>;
			key-positions = <LT1 LM1>;
			timeout-ms = <COMBO_TERM_FAST>;
		};
	};
};
